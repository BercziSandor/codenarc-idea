plugins {
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'java'
    id 'idea'
    id 'groovy'
    id 'application'
}

if (!project.hasProperty('publishPluginChannels')) ext.publishPluginChannels = ''
if (!project.hasProperty('publishPluginToken')) ext.publishPluginToken = '**UNDEFINED**'
if (!project.hasProperty('ideVersion')) ext.ideVersion = 'LATEST-EAP-SNAPSHOT'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

group 'org.codenarc.idea'
version "${pluginVersion}"

repositories {
    mavenCentral()
}

idea {
    project {
        jdkName = '11'
    }
}

configurations {
    implementation  {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    generator.extendsFrom compile, implementation, runtimeOnly
}

dependencies {
    compileOnly( 'org.codehaus.groovy:groovy-all') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }
    implementation("org.codenarc:CodeNarc:$codenarcVersion") {
        exclude group: 'org.codehaus.groovy'
    }

    implementation 'io.sentry:sentry:5.1.0'

    runtimeOnly('org.gmetrics:GMetrics:1.1') {
        exclude group: 'org.codehaus.groovy'
    }

    compile 'org.apache.commons:commons-lang3:3.9'

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5', {
        exclude group: 'org.codehaus.groovy'
    }

    testImplementation 'com.agorapulse.testing:fixt:0.2.1.1'

    generator( 'org.codehaus.groovy:groovy-all') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }
}

String idePlatformVersion = "${ideVersion}"

logger.lifecycle("Using IDE version $idePlatformVersion")

intellij {
    pluginName = 'CodeNarc'

    downloadSources = !providers.environmentVariable('CI').forUseAtConfigurationTime().present
    plugins = ['Groovy', 'gradle', 'java']
    version = idePlatformVersion
    instrumentCode = false
}

publishPlugin {
    token = publishPluginToken
    if (publishPluginChannels) {
        channels = Arrays.asList(publishPluginChannels.split(','))
    }
}

runIde {
    jvmArgs "-Xmx2g"
}

runPluginVerifier {
    ideVersions = [
            idePlatformVersion
    ]
}

patchPluginXml {
    version "${pluginVersion}"
    sinceBuild = '202.8194.7'
    untilBuild = null
    changeNotes = file('changelog.html').text
    pluginDescription = file('description.html').text
}

application {
    mainClassName = 'org.codenarc.idea.gen.RuleInspectionsGenerator'
}

run {
    // generate classes
    classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath + configurations.generator
    args project.rootDir.canonicalPath
}
