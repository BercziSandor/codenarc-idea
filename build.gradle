plugins {
    id 'org.jetbrains.intellij.platform' version '2.5.0'
    id 'java'
    id 'idea'
    id 'groovy'
    id 'application'
}

if (!project.hasProperty('publishPluginChannels')) ext.publishPluginChannels = ''
if (!project.hasProperty('publishPluginToken')) ext.publishPluginToken = '**UNDEFINED**'
if (!project.hasProperty('ideVersion')) ext.ideVersion = 'IC-2024.3.3'

wrapper {
    gradleVersion = '8.6'
    distributionType = Wrapper.DistributionType.ALL
    // Checksums are found here: https://gradle.org/release-checksums/
    distributionSha256Sum = 'fba8464465835e74f7270bbf43d6d8a8d7709ab0a43ce1aa3323f73e9aa0c612'
}

group 'org.codenarc.idea'
version "${pluginVersion}"

repositories {
    mavenCentral()
    intellijPlatform {
        releases()
        marketplace()
        defaultRepositories()
    }
}

idea {
    project {
        jdkName = '17'
    }
}

sourceSets.create 'generator', {
    compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath
    runtimeClasspath += sourceSets.main.output + sourceSets.main.runtimeClasspath
    groovy {
        srcDirs 'src/generator'
    }
}

configurations {
    implementation  {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    generatorImplementation.extendsFrom compile, implementation, runtimeOnly
}

// Configure Gradle IntelliJ Plugin
// Read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin.html
dependencies {
    // https://plugins.jetbrains.com/docs/intellij/creating-plugin-project.html#components-of-a-wizard-generated-gradle-intellij-platform-plugin
    intellijPlatform {
        intellijIdeaCommunity('2024.3.3')
        // plugins(providers.gradleProperty("platformPlugins").map { it.split(',') })
//        def platformPlugins = providers.gradleProperty("platformPlugins").orNull?.split(',') ?: []
//        platformPlugins?.each { pluginId ->
//            plugins {
//                id pluginId // Assuming each plugin ID is valid and follows the correct format
//            }
//        }
        bundledPlugin("org.intellij.groovy")

        def type = providers.gradleProperty('platformType')
        def version = providers.gradleProperty('platformVersion')
        create(type, version)
//        testFramework(org.jetbrains.intellij.platform.gradle.TestFrameworkType.Platform)
//        bundledPlugins(providers.gradleProperty("platformBundledPlugins").map { it.split(',') })
//        plugin("CodeNarc:6.0.0")
//        plugin 'org.intellij.scala', '2024.1.4'

    }
    compileOnly('org.apache.groovy:groovy') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }
    compileOnly( 'org.apache.groovy:groovy') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }
    implementation("org.codenarc:CodeNarc:$codenarcVersion") {
        exclude group: 'org.codehaus.groovy'
        exclude group: 'org.appache.groovy'
    }

    implementation 'io.sentry:sentry:5.1.0'

    runtimeOnly('org.gmetrics:GMetrics-Groovy4:2.1.0') {
        exclude group: 'org.codehaus.groovy'
        exclude group: 'org.appache.groovy'
    }

    compile 'org.apache.commons:commons-lang3:3.9'

    testImplementation "org.spockframework:spock-core:$spockVersion", {
        exclude group: 'org.codehaus.groovy'
        exclude group: 'org.appache.groovy'
    }

    testImplementation 'com.agorapulse.testing:fixt:0.2.1.1'
    testImplementation( 'org.apache.groovy:groovy') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }

    generatorImplementation( 'org.apache.groovy:groovy') {
        version {
            strictly "$groovyVersion"
        }
        because 'there are version conflicts when building'
    }
}

String idePlatformVersion = "${ideVersion}"

logger.lifecycle("Using IDE version $idePlatformVersion")

intellijPlatform {
    pluginConfiguration {
        ideaVersion {
            sinceBuild = "243"
        }
        name = 'CodeNarc'
    }
    publishing {
    }
    signing {
    }
    pluginVerification {
    }
//    downloadSources = !providers.environmentVariable('CI').forUseAtConfigurationTime().present
//    plugins = ['Groovy', 'gradle', 'java']
    version = idePlatformVersion
    instrumentCode = false
}


publishPlugin {
    token = publishPluginToken
    if (publishPluginChannels) {
        channels = Arrays.asList(publishPluginChannels.split(','))
    }
}

runIde {
    jvmArgs "-Xmx2g"
}

runPluginVerifier {
    ideVersions = [
            idePlatformVersion
    ]
}

patchPluginXml {
    version "${pluginVersion}"
    sinceBuild = '223.7571.182'
    untilBuild = null
    changeNotes = file('changelog.html').text
    pluginDescription = file('description.html').text
}

application {
    mainClassName = 'org.codenarc.idea.gen.RuleInspectionsGenerator'
}

run {
    // generate classes
    classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath + sourceSets.generator.compileClasspath + sourceSets.generator.runtimeClasspath
    args project.rootDir.canonicalPath
}

if (spockVersion.startsWith('2.')) {
    test {
        useJUnitPlatform()
    }
}
