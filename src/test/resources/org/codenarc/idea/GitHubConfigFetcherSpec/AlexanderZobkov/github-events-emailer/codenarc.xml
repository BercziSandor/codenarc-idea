<ruleset xmlns="http://codenarc.org/ruleset/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
         xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

    <!-- Basic (http://codenarc.sourceforge.net/codenarc-rules-basic.html) -->
    <ruleset-ref path='rulesets/basic.xml'/>

    <!-- Braces (http://codenarc.sourceforge.net/codenarc-rules-braces.html) -->
    <ruleset-ref path='rulesets/braces.xml'/>

    <!-- Comments (http://codenarc.sourceforge.net/codenarc-rules-comments.html) -->
    <ruleset-ref path='rulesets/comments.xml'/>

    <!-- Concurrency (http://codenarc.sourceforge.net/codenarc-rules-concurrency.html) -->
    <ruleset-ref path='rulesets/concurrency.xml'/>

    <!-- Convention (http://codenarc.sourceforge.net/codenarc-rules-convention.html) -->
    <ruleset-ref path='rulesets/convention.xml'>
        <exclude name="ImplicitClosureParameter"/>
        <exclude name="ImplicitReturnStatement"/>
        <exclude name="NoJavaUtilDate"/>
        <!-- Will complicate merges -->
        <exclude name="PublicMethodsBeforeNonPublicMethods"/>
        <exclude name="StaticMethodsBeforeInstanceMethods"/>
        <!-- Why would one want require every class to be annotated??? -->
        <exclude name="CompileStatic"/>
        <!-- Want to simplify code by omitting return statements where not required -->
        <exclude name="ImplicitReturnStatement"/>
    </ruleset-ref>

    <!-- Design (http://codenarc.sourceforge.net/codenarc-rules-design.html) -->
    <ruleset-ref path='rulesets/design.xml'>
        <rule-config name="Instanceof">
            <property name="enabled" value="false"/>
        </rule-config>
        <!-- It's buggy -->
        <exclude name="AbstractClassWithoutAbstractMethod"/>
        <exclude name="AbstractClassWithPublicConstructor"/>
    </ruleset-ref>

    <!-- DRY (Don't Repeat Yourself) (http://codenarc.sourceforge.net/codenarc-rules-dry.html) -->
    <ruleset-ref path='rulesets/dry.xml'>
        <!-- It is quite stupid to define constants for every xml element. This completely ruins DSL. -->
        <exclude name="DuplicateStringLiteral"/>
    </ruleset-ref>

    <!-- Enhanced Classpath (http://codenarc.sourceforge.net/codenarc-rules-enhanced.html) -->
    <!--<ruleset-ref path='rulesets/enhanced.xml'/>-->

    <!-- Exceptions (http://codenarc.sourceforge.net/codenarc-rules-exceptions.html) -->
    <ruleset-ref path='rulesets/exceptions.xml'>
        <!-- Want to be safe -->
        <exclude name="CatchException"/>
        <exclude name="CatchRuntimeException"/>
        <exclude name="CatchThrowable"/>
    </ruleset-ref>

    <!-- Formatting (http://codenarc.sourceforge.net/codenarc-rules-formatting.html) -->
    <ruleset-ref path='rulesets/formatting.xml'>
        <rule-config name="SpaceAroundMapEntryColon">
            <property name="characterAfterColonRegex" value="\s"/>
            <!-- Conflicts with default IDEA formatting -->
            <property name="enabled" value="false"/>
        </rule-config>
        <rule-config name="SpaceAfterClosingBrace">
            <!-- Conflicts with default IDEA formatting -->
            <property name="enabled" value="false"/>
        </rule-config>
        <rule-config name="Indentation">
            <!-- Not compatible with IDEA. -->
            <property name="enabled" value="false"/>
        </rule-config>
        <rule-config name="ClassEndsWithBlankLine">
            <!-- Conflicts with default IDEA formatting -->
            <property name="enabled" value="false"/>
        </rule-config>
        <rule-config name="ClassStartsWithBlankLine">
            <!-- Conflicts with default IDEA formatting -->
            <property name="enabled" value="false"/>
        </rule-config>
        <rule-config name="ClosureStatementOnOpeningLineOfMultipleLineClosure">
            <!-- Seems to be buggy -->
            <property name="enabled" value="false"/>
        </rule-config>
        <!-- This pedantism gives nothing
        <exclude name="ClassStartsWithBlankLine"/>
        <exclude name="ClassEndsWithBlankLine"/>
        -->
    </ruleset-ref>

    <!-- Generic (http://codenarc.sourceforge.net/codenarc-rules-generic.html) -->
    <ruleset-ref path='rulesets/generic.xml'/>

    <!-- Grails (http://codenarc.sourceforge.net/codenarc-rules-grails.html) -->
    <!--<ruleset-ref path='rulesets/grails.xml'/>-->

    <!-- Groovy-ism (http://codenarc.sourceforge.net/codenarc-rules-groovyism.html) -->
    <ruleset-ref path='rulesets/groovyism.xml'>
        <!-- This makes it more difficult to circumvent certain edge cases of Groovy MOP. -->
        <exclude name="GetterMethodCouldBeProperty"/>
        <!-- This doesnt work if multiple params as in safely("checking last poll status", { checker.lastPollFailedReason }) -->
        <exclude name="ClosureAsLastMethodParameter"/>
        <!-- New Java time API has plus() and it's much nicer than (a+b).smth -->
        <exclude name="ExplicitCallToPlusMethod"/>
    </ruleset-ref>

    <!-- Imports (http://codenarc.sourceforge.net/codenarc-rules-imports.html) -->
    <ruleset-ref path='rulesets/imports.xml'>
        <exclude name="ImportFromSunPackages"/>
        <exclude name="MisorderedStaticImports"/>
        <exclude name="NoWildcardImports"/>
    </ruleset-ref>

    <!-- JDBC (http://codenarc.sourceforge.net/codenarc-rules-jdbc.html) -->
    <ruleset-ref path='rulesets/jdbc.xml'/>

    <!-- JUnit (http://codenarc.sourceforge.net/codenarc-rules-junit.html) -->
    <ruleset-ref path='rulesets/junit.xml'/>

    <!-- Logging (http://codenarc.sourceforge.net/codenarc-rules-logging.html) -->
    <ruleset-ref path='rulesets/logging.xml'/>

    <!-- Naming (http://codenarc.sourceforge.net/codenarc-rules-naming.html) -->
    <ruleset-ref path='rulesets/naming.xml'>
        <exclude name="FactoryMethodName"/>
    </ruleset-ref>

    <!-- Security (http://codenarc.sourceforge.net/codenarc-rules-security.html) -->
    <ruleset-ref path='rulesets/security.xml'>
        <exclude name="JavaIoPackageAccess"/>
    </ruleset-ref>

    <!-- Serialization (http://codenarc.sourceforge.net/codenarc-rules-serialization.html) -->
    <ruleset-ref path='rulesets/serialization.xml'/>

    <!-- Size and Complexity (http://codenarc.sourceforge.net/codenarc-rules-size.html) -->
    <ruleset-ref path='rulesets/size.xml'>
        <rule-config name="ClassSize">
            <property name="maxLines" value="500"/>
        </rule-config>
        <rule-config name="MethodSize">
            <property name="maxLines" value="50"/>
        </rule-config>
        <exclude name="CrapMetric"/>
    </ruleset-ref>

    <!-- Unnecessary (http://codenarc.sourceforge.net/codenarc-rules-unnecessary.html) -->
    <ruleset-ref path='rulesets/unnecessary.xml'>
        <!-- Easier to port code and sometimes makes code easier to read -->
        <exclude name="UnnecessaryReturnKeyword"/>
        <!-- Interferes with Camel Groovy DSL. -->
        <exclude name="UnnecessarySetter"/>
        <!-- Interferes with Camel Groovy DSL. -->
        <exclude name="UnnecessaryGetter"/>
        <!-- For the sake of IDE completion support. -->
        <exclude name="UnnecessaryObjectReferences"/>
    </ruleset-ref>

    <!-- Unused (http://codenarc.sourceforge.net/codenarc-rules-unused.html) -->
    <ruleset-ref path='rulesets/unused.xml'/>
</ruleset>